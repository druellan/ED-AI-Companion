import os

# The folder for the Elite Dangerous journal, usually you don't need to change this one
JOURNAL_DIRECTORY = os.path.join(
    os.environ["USERPROFILE"], "Saved Games", "Frontier Developments", "Elite Dangerous"
)


# Enter the API endpoint of the LLM service you want to use, the API Key and the model
LLM_ENDPOINT = "https://openrouter.ai/api/v1/"
LLM_API_KEY = (
    ""
)
# The primary model to use, and a list of models to use if the primary model fails
LLM_MODEL_NAME = "mistralai/mistral-small-3.1-24b-instruct:free"
LLM_MODEL_NAMES = [
    "google/gemini-2.0-flash-exp:free",
]
LLM_MAX_TOKENS_ALERT = 32000

# You can turn off the use of tools
# The AI use tools to retrieive more information about the events, and can consume 3 times the amount of tokens
LLM_USE_TOOLS = True


# Use WINDOWS for the built in TTS Windows feature
# Use EDGE for the Edge Browser/Azure TTS service, can introduce some extra latency
TTS_TYPE = "EDGE"

# Add effects to the TTS voice
TTS_EFFECTS = True

# The voice to use for each of the TTS services
# TTS_WINDOWS_VOICE = "Microsoft Zira Desktop - English (United States)"
TTS_EDGE_VOICE = "en-GB-LibbyNeural"
TTS_EDGE_RATE = "+25%"
TTS_EDGE_VOLUME = "-50%"
TTS_EDGE_PITCH = "+0Hz"

# Microsoft Eva (Cortana's voice) is not available in Windows by default,
# try following this guide to activate it: https://github.com/watermarkhu/enable-microsoft-eva-tts
TTS_WINDOWS_VOICE = "Microsoft Eva Mobile - English (United States)"
TTS_WINDOWS_RATE = 180
TTS_WINDOWS_VOLUME = 0.8

# List all the Windows voices available in the system
TTS_WINDOWS_LIST = False


# The URL to the EDSM API to fetch information about the target system
EDSM_API = "https://www.edsm.net"


SYSTEM_PROMPT = """# Context
You are a computer AI inside my starship in the game Elite Dangerous.
I'm going to provide you events from the ship journal and other relevant data, in compact text format.
Always talk to me directly as Commander.

# Response directives
Use information and facts that are related to the game Elite Dangerous and the in-game universe.
Use natural language. Don't build lists. Don't format the responses.
Be as brief as possible, accurate as possible and factual as possible.
Triage or summarize multiple events if necessary.
Try to pronounce acronyms without the symbols inside them.
Round numbers.
Measure fuel in units of ton.
Avoid repeating messages.
You can reply "NULL" (only response) if nothing in the context worth a response or you are instructed to remain silent.

# Priorities, from critical to anecdotal:
- Events related to immediate danger to the ship and the safety of the crew.
- Events that can relate to danger in the future.
- Events related to human players, like messages and invites.
- Events that change or can change the legal status of the ship.
- Events that can compromise the cargo.
- Events related to navigation.
- Events that can produce economical gain.
- Events that can produce exploration points.
- Facts that can be helpful in the future.
- Facts that can be of interest.

# Common dangers:
Ship fuelLevel < 10 tons.
Ship hullHealth < 50%.
Ship shields are offline.
Ship temperature > 100.
System security is low or anarchy.
We are jumping to a non scoopable star.
A nav beacon is compromised.
Threat level is > 4.
Too many hostile messages in previous events.

# Current ship status, to use as context:
{current_status}

# Ship cargo, to use as context:
{current_cargo}

# Active missions, to use as context:
{current_missions}

# This is a list of 20 previous events, to use as context:
{recent_events}
"""

TOOLS_PROMPT = """
# Tools usage
Usage: output just the function name and the parameter in a new line, no other indicators or formatting is needed.
Example: get_system_stations("Hyperion")
Use tools as you feel fit.
Take the context in account while parsing the response from the tool. Don't go off topic.
"""

USER_PROMPT = """
# Information I find remarkable and worth mentioning:
A cargo item is declared illegal or stolen.
Pristine or plenty of resources.
Great buy opportunities.
A guardian site in the system.
A megaship in the system.
A generation ship in the system.
A player or a player faction.
A tech broker in the system or station.
An engineer in the system or station.
Rare goods.

# This is the event that just happened, and a small context specific to the event:
{event_new}
"""

# This is no longer needed, I've found the AI can handle the events by itself
# Remember this about stars:
# Type K (Orange star): scoopable for fuel.
# Type G (Yellow star): scoopabl for fuele.
# Type B (Blue-White start): scoopable for fuel.
# Type F (White star): scoopable for fuel.
# Type O (Blue star): scoopable for fuel.
# Type A (Blue-White star): scoopable for fuel.
# Type M (Red Dwarf): scoopable for fuel.

# Type L (Brown dwarf): not scoopable for fuel.
# Type T (Brown dwarf): not scoopable for fuel.
# Type Y (Brown dwarf): not scoopable for fuel.

# Change to True or False, depending if you want the assistant to react or ignore each event


# Startup Events
STARTUP_EVENTS = {
    "LoadGame": False,
    "NewCommander": False,
    "Missions": False,
    "Statistics": False,
}

# Combat Events
COMBAT_EVENTS = {
    "Died": False,
    "Bounty": True,
    "CapShipBond": True,
    "Interdiction": True,
    "Interdicted": False,
    "EscapeInterdiction": False,
    "FactionKillBond": True,
    "FighterDestroyed": True,
    "HeatDamage": True,
    "HeatWarning": True,
    "HullDamage": True,
    "PVPKill": True,
    "ShieldState": True,
    "ShipTargeted": True,
    "SRVDestroyed": True,
    "UnderAttack": True,
}

# Travel Events
TRAVEL_EVENTS = {
    "CodexEntry": True,
    "ApproachBody": True,
    "Docked": False,
    "DockingCanceled": False,
    "DockingDenied": True,
    "DockingGranted": False,
    "DockingRequested": False,
    "DockingTimeout": False,
    "FSDJump": True,
    "FSDTarget": True,
    "LeaveBody": True,
    "Liftoff": True,
    "StartJump": False,
    "SupercruiseEntry": False,
    "SupercruiseExit": True,
    "Touchdown": True,
    "Undocked": True,
    "NavRoute": False,
    "NavRouteClear": False,
}

# Exploration Events
EXPLORATION_EVENTS = {
    "CodexEntry": True,
    "DiscoveryScan": True,
    "Scan": True,
    "FSSAllBodiesFound": True,
    "FSSBodySignals": False,
    "FSSDiscoveryScan": True,
    "FSSSignalDiscovered": True,
    "MaterialCollected": True,
    "MaterialDiscarded": False,
    "MaterialDiscovered": True,
    "MultiSellExplorationData": False,
    "NavBeaconScan": True,
    "BuyExplorationData": False,
    "SAAScanComplete": False,
    "SAASignalsFound": True,
    "ScanBaryCentre": False,
    "SellExplorationData": False,
    "Screenshot": False,
}

# Trade Events
TRADE_EVENTS = {
    "Trade": False,
    "AsteroidCracked": False,
    "BuyTradeData": False,
    "CollectCargo": True,
    "EjectCargo": True,
    "MarketBuy": False,
    "MarketSell": False,
    "MiningRefined": False,
}

# Station Services Events
STATION_SERVICES_EVENTS = {
    "StationServices": True,
    "BuyAmmo": False,
    "BuyDrones": False,
    "CargoDepot": True,
    "CommunityGoal": True,
    "CommunityGoalDiscard": False,
    "CommunityGoalJoin": False,
    "CommunityGoalReward": False,
    "CrewAssign": False,
    "CrewFire": False,
    "CrewHire": False,
    "EngineerContribution": False,
    "EngineerCraft": True,
    "EngineerLegacyConvert": False,
    "FetchRemoteModule": False,
    "Market": True,
    "MassModuleStore": False,
    "MaterialTrade": True,
    "MissionAbandoned": False,
    "MissionAccepted": False,
    "MissionCompleted": True,
    "MissionFailed": False,
    "MissionRedirected": False,
    "ModuleBuy": False,
    "ModuleRetrieve": False,
    "ModuleSell": False,
    "ModuleSellRemote": False,
    "ModuleStore": False,
    "ModuleSwap": False,
    "Outfitting": False,
    "PayBounties": True,
    "PayFines": True,
    "PayLegacyFines": True,
    "RedeemVoucher": True,
    "RefuelAll": False,
    "RefuelPartial": False,
    "Repair": False,
    "RepairAll": False,
    "RestockVehicle": False,
    "ScientificResearch": True,
    "ShipyardTransfer": True,
}

# Powerplay Events
POWERPLAY_EVENTS = {
    "PowerplayCollect": True,
    "PowerplayDefect": True,
    "PowerplayDeliver": False,
    "PowerplayFastTrack": False,
    "PowerplayJoin": False,
    "PowerplayLeave": False,
    "PowerplaySalary": False,
    "PowerplayVote": False,
    "PowerplayVoucher": False,
}

# Squadron Events
SQUADRON_EVENTS = {
    "AppliedToSquadron": False,
    "DisbandedSquadron": False,
    "InvitedToSquadron": True,
    "JoinedSquadron": False,
    "KickedFromSquadron": True,
    "LeftSquadron": True,
    "SharedBookmarkToSquadron": False,
    "SquadronCreated": False,
    "SquadronDemotion": True,
    "SquadronPromotion": True,
    "WonATrophyForSquadron": False,
}

# Fleet Carrier Events
FLEET_CARRIER_EVENTS = {
    "CarrierJump": True,
    "CarrierBuy": False,
    "CarrierStats": False,
    "CarrierJumpRequest": True,
    "CarrierDecommission": False,
    "CarrierCancelDecommission": False,
    "CarrierBankTransfer": False,
    "CarrierDepositFuel": True,
    "CarrierCrewServices": False,
    "CarrierFinance": False,
    "CarrierShipPack": False,
    "CarrierModulePack": False,
    "CarrierTradeOrder": False,
    "CarrierDockingPermission": False,
    "CarrierNameChanged": False,
    "CarrierJumpCancelled": False,
}

# Odyssey Events
ODYSSEY_EVENTS = {
    "Backpack": False,
    "BackpackChange": False,
    "BookDropship": False,
    "BookTaxi": False,
    "BuyMicroResources": False,
    "BuySuit": False,
    "BuyWeapon": False,
    "CancelDropship": False,
    "CancelTaxi": False,
    "CollectItems": False,
    "CreateSuitLoadout": False,
    "DeleteSuitLoadout": False,
    "Disembark": True,
    "DropItems": False,
    "DropShipDeploy": False,
    "Embark": True,
    "FCMaterials": False,
    "LoadoutEquipModule": False,
    "LoadoutRemoveModule": False,
    "RenameSuitLoadout": False,
    "ScanOrganic": False,
    "SellMicroResources": False,
    "SellOrganicData": False,
    "SellWeapon": False,
    "SwitchSuitLoadout": False,
    "TransferMicroResources": False,
    "TradeMicroResources": False,
    "UpgradeSuit": False,
    "UpgradeWeapon": False,
    "UseConsumable": False,
}

# Other Events
OTHER_EVENTS = {
    "AfmuRepairs": False,
    "ApproachSettlement": True,
    "ChangeCrewRole": False,
    "CockpitBreached": True,
    "CommitCrime": True,
    "Continued": False,
    "CrewLaunchFighter": True,
    "CrewMemberJoins": True,
    "CrewMemberQuits": True,
    "CrewMemberRoleChange": True,
    "CrimeVictim": True,
    "DatalinkScan": True,
    "DatalinkVoucher": False,
    "DataScanned": True,
    "DockFighter": True,
    "DockSRV": True,
    "EndCrewSession": True,
    "FighterRebuilt": True,
    "FuelScoop": True,
    "Friends": True,
    "JetConeBoost": False,
    "JetConeDamage": False,
    "JoinACrew": True,
    "KickCrewMember": True,
    "LaunchDrone": False,
    "LaunchFighter": True,
    "LaunchSRV": True,
    "ModuleInfo": False,
    "NpcCrewRank": False,
    "Promotion": True,
    "ProspectedAsteroid": True,
    "QuitACrew": False,
    "RebootRepair": True,
    "ReceiveText": True,
    "RepairDrone": False,
    "Resurrect": True,
    "Scanned": True,
    "SelfDestruct": True,
    "SendText": False,
    "Shutdown": False,
    "Synthesis": False,
    "SystemsShutdown": False,
    "USSDrop": False,
    "VehicleSwitch": False,
    "WingAdd": False,
    "WingInvite": True,
    "WingJoin": False,
    "WingLeave": False,
    "CargoTransfer": False,
    "SupercruiseDestinationDrop": False,
}

# Status Events
STATUS_EVENTS = {
    "LandingGearUp": False,
    "LandingGearDown": False,
    "FlightAssistOn": False,
    "FlightAssistOff": False,
    "HardpointsRetracted": False,
    "HardpointsDeployed": False,
    "LightsOff": False,
    "LightsOn": False,
    "CargoScoopRetracted": False,
    "CargoScoopDeployed": False,
    "SilentRunningOff": False,
    "SilentRunningOn": False,
    "FuelScoopStarted": False,
    "FuelScoopEnded": False,
    "SrvHandbrakeOff": False,
    "SrvHandbrakeOn": False,
    "SrvTurretViewConnected": False,
    "SrvTurretViewDisconnected": False,
    "SrvDriveAssistOff": False,
    "SrvDriveAssistOn": False,
    "FsdMassLockEscaped": False,
    "FsdMassLocked": False,
    "LowFuelWarningCleared": True,
    "LowFuelWarning": True,
    "OutofDanger": True,
    "InDanger": True,
    "NightVisionOff": False,
    "NightVisionOn": False,
    "LowOxygenWarningCleared": True,
    "LowOxygenWarning": True,
    "LowHealthWarningCleared": True,
    "LowHealthWarning": True,
    "GlideModeExited": False,
    "GlideModeEntered": False,
    "BreathableAtmosphereExited": False,
    "BreathableAtmosphereEntered": False,
    "LegalStateChanged": True,
    "WeaponSelected": False,
}

MEMORY_EVENTS = [
    # Startup Events
    "NewCommander",
    "Missions",
    "Statistics",
    # Combat Events
    "Bounty",
    "CapShipBond",
    "Interdiction",
    "Interdicted",
    "EscapeInterdiction",
    "FactionKillBond",
    "FighterDestroyed",
    "HeatDamage",
    "HeatWarning",
    "HullDamage",
    "PVPKill",
    "ShieldState",
    "ShipTargeted",
    "SRVDestroyed",
    "UnderAttack",
    # Travel Events
    "ApproachBody",
    "Docked",
    "DockingCanceled",
    "DockingDenied",
    "DockingGranted",
    "DockingRequested",
    "DockingTimeout",
    "FSDJump",
    "FSDTarget",
    "LeaveBody",
    "Liftoff",
    "StartJump",
    "SupercruiseEntry",
    "SupercruiseExit",
    "Touchdown",
    "Undocked",
    "NavRoute",
    "NavRouteClear",
    # Exploration Events
    "DiscoveryScan",
    "Scan",
    "FSSAllBodiesFound",
    "FSSBodySignals",
    "FSSDiscoveryScan",
    "FSSSignalDiscovered",
    "MaterialCollected",
    "MaterialDiscarded",
    "MaterialDiscovered",
    "MultiSellExplorationData",
    "NavBeaconScan",
    "BuyExplorationData",
    "SAAScanComplete",
    "SAASignalsFound",
    "ScanBaryCentre",
    "SellExplorationData",
    # Trade Events
    "Trade",
    "AsteroidCracked",
    "BuyTradeData",
    "CollectCargo",
    "EjectCargo",
    "MarketBuy",
    "MarketSell",
    "MiningRefined",
    # Station Services Events
    "StationServices",
    "BuyAmmo",
    "BuyDrones",
    "CargoDepot",
    "CommunityGoal",
    "CommunityGoalDiscard",
    "CommunityGoalJoin",
    "CommunityGoalReward",
    "CrewAssign",
    "CrewFire",
    "CrewHire",
    "EngineerContribution",
    "EngineerCraft",
    "EngineerLegacyConvert",
    "FetchRemoteModule",
    "Market",
    "MassModuleStore",
    "MaterialTrade",
    "MissionAbandoned",
    "MissionAccepted",
    "MissionCompleted",
    "MissionFailed",
    "MissionRedirected",
    "ModuleBuy",
    "ModuleRetrieve",
    "ModuleSell",
    "ModuleSellRemote",
    "ModuleStore",
    "ModuleSwap",
    "Outfitting",
    "PayBounties",
    "PayFines",
    "PayLegacyFines",
    "RedeemVoucher",
    "RefuelAll",
    "RefuelPartial",
    "Repair",
    "RepairAll",
    "RestockVehicle",
    "ScientificResearch",
    "ShipyardTransfer",
    # Powerplay Events
    "PowerplayCollect",
    "PowerplayDefect",
    "PowerplayDeliver",
    "PowerplayFastTrack",
    "PowerplayJoin",
    "PowerplayLeave",
    "PowerplaySalary",
    "PowerplayVote",
    "PowerplayVoucher",
    # Squadron Events
    "AppliedToSquadron",
    "DisbandedSquadron",
    "InvitedToSquadron",
    "JoinedSquadron",
    "KickedFromSquadron",
    "LeftSquadron",
    "SharedBookmarkToSquadron",
    "SquadronCreated",
    "SquadronDemotion",
    "SquadronPromotion",
    "WonATrophyForSquadron",
    # Fleet Carrier Events
    "CarrierJump",
    "CarrierBuy",
    "CarrierStats",
    "CarrierJumpRequest",
    "CarrierDecommission",
    "CarrierCancelDecommission",
    "CarrierBankTransfer",
    "CarrierDepositFuel",
    "CarrierCrewServices",
    "CarrierFinance",
    "CarrierShipPack",
    "CarrierModulePack",
    "CarrierTradeOrder",
    "CarrierDockingPermission",
    "CarrierNameChanged",
    "CarrierJumpCancelled",
    # Odyssey Events
    "Backpack",
    "BackpackChange",
    "BookDropship",
    "BookTaxi",
    "BuyMicroResources",
    "BuySuit",
    "BuyWeapon",
    "CancelDropship",
    "CancelTaxi",
    "CollectItems",
    "CreateSuitLoadout",
    "DeleteSuitLoadout",
    "Disembark",
    "DropItems",
    "DropShipDeploy",
    "Embark",
    "FCMaterials",
    "LoadoutEquipModule",
    "LoadoutRemoveModule",
    "RenameSuitLoadout",
    "ScanOrganic",
    "SellMicroResources",
    "SellOrganicData",
    "SellWeapon",
    "SwitchSuitLoadout",
    "TransferMicroResources",
    "TradeMicroResources",
    "UpgradeSuit",
    "UpgradeWeapon",
    "UseConsumable",
    # Other Events
    "AfmuRepairs",
    "ApproachSettlement",
    "ChangeCrewRole",
    "CockpitBreached",
    "CommitCrime",
    "Continued",
    "CrewLaunchFighter",
    "CrewMemberJoins",
    "CrewMemberQuits",
    "CrewMemberRoleChange",
    "CrimeVictim",
    "DatalinkScan",
    "DatalinkVoucher",
    "DataScanned",
    "DockFighter",
    "DockSRV",
    "EndCrewSession",
    "FighterRebuilt",
    "FuelScoop",
    "Friends",
    "JetConeBoost",
    "JetConeDamage",
    "JoinACrew",
    "KickCrewMember",
    "LaunchDrone",
    "LaunchFighter",
    "LaunchSRV",
    "ModuleInfo",
    "NpcCrewRank",
    "Promotion",
    "ProspectedAsteroid",
    "QuitACrew",
    "RebootRepair",
    "ReceiveText",
    "RepairDrone",
    "Resurrect",
    "Scanned",
    "SelfDestruct",
    "SendText",
    "Shutdown",
    "Synthesis",
    "SystemsShutdown",
    "USSDrop",
    "VehicleSwitch",
    "WingAdd",
    "WingInvite",
    "WingJoin",
    "WingLeave",
    "CargoTransfer",
    "SupercruiseDestinationDrop",
    # Status Events
    "LandingGearUp",
    "LandingGearDown",
    "FlightAssistOn",
    "FlightAssistOff",
    "HardpointsRetracted",
    "HardpointsDeployed",
    "LightsOff",
    "LightsOn",
    "CargoScoopRetracted",
    "CargoScoopDeployed",
    "SilentRunningOff",
    "SilentRunningOn",
    "FuelScoopStarted",
    "FuelScoopEnded",
    "SrvHandbrakeOff",
    "SrvHandbrakeOn",
    "SrvTurretViewConnected",
    "SrvTurretViewDisconnected",
    "SrvDriveAssistOff",
    "SrvDriveAssistOn",
    "FsdMassLockEscaped",
    "FsdMassLocked",
    "LowFuelWarningCleared",
    "LowFuelWarning",
    "OutofDanger",
    "InDanger",
    "NightVisionOff",
    "NightVisionOn",
    "LowOxygenWarningCleared",
    "LowOxygenWarning",
    "LowHealthWarningCleared",
    "LowHealthWarning",
    "GlideModeExited",
    "GlideModeEntered",
    "BreathableAtmosphereExited",
    "BreathableAtmosphereEntered",
    "LegalStateChanged",
    "WeaponSelected",
]


# Debug flags. You can use these to improve the information displayed in the console
DEBUG_EVENT_DUMP = False
DEBUG_PARSER_PROMPT = True
DEBUG_STATE_UPDATE = False
DEBUG_AI_PROMPT_DUMP = True
