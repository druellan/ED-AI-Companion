import os

# The folder for the Elite Dangerous journal, usually you don't need to change this one
JOURNAL_DIRECTORY = os.path.join(
    os.environ["USERPROFILE"], "Saved Games", "Frontier Developments", "Elite Dangerous"
)

# How often the code is going to look for new events to send to the AI, in seconds
JOURNAL_TIME_INTERVAL = 2

# Enter the API endpoint of the LLM service you want to use, the API Key and the model
LLM_ENDPOINT = "https://openrouter.ai/api/v1/"
LLM_API_KEY = (
    ""
)
# The primary model to use, and a list of models to use if the primary model fails
LLM_MODEL_NAME = "google/gemini-2.0-flash-exp:free"
LLM_MODEL_NAMES = [
    "mistralai/mistral-small-3.1-24b-instruct:free",
]
LLM_MAX_TOKENS_ALERT = 32000

# You can turn off the use of tools
# The AI use tools to retrieive more information about the events, and can consume 3 times the amount of tokens
LLM_USE_TOOLS = False


# Use WINDOWS for the built in TTS Windows feature
# Use EDGE for the Edge Browser/Azure TTS service, can introduce some extra latency
TTS_TYPE = "WINDOWS"

# Add effects to the TTS voice
TTS_EFFECTS = True

# The voice to use for each of the TTS services
# TTS_WINDOWS_VOICE = "Microsoft Zira Desktop - English (United States)"
TTS_EDGE_VOICE = "en-GB-LibbyNeural"
TTS_EDGE_RATE = "+25%"
TTS_EDGE_VOLUME = "-50%"
TTS_EDGE_PITCH = "+0Hz"

# Microsoft Eva (Cortana's voice) is not available in Windows by default,
# try following this guide to activate it: https://github.com/watermarkhu/enable-microsoft-eva-tts
TTS_WINDOWS_VOICE = "Microsoft Eva Mobile - English (United States)"
TTS_WINDOWS_RATE = 180
TTS_WINDOWS_VOLUME = 0.8

# List all the Windows voices available in the system
TTS_WINDOWS_LIST = False


# The URL to the EDSM API to fetch information about the target system
EDSM_API = "https://www.edsm.net"

SYSTEM_PROMPT = """# Context and Persona
You are a computer AI inside a starship in the game Elite Dangerous. I'll provide game events and data in compact text format.
You have a professional and formal tone; technical knowledge of the ship systems; you always focus on safety; you have neutral political views.

# Response Guidelines
- Address me as Commander in a concise and direct manner, avoiding over-elaboration
- Use natural language — avoid markdown, formatting and don't build lists
- Do not repeat previous information unless escalation or additional context demands it
- Summarize complex events in one line, offering a brief explanation where necessary
- Focus on information that is available rather than what's missing
- Don't pronounce symbols in names (underscore, slash, etc)

## Response Triggers
ALWAYS: Danger alerts, player interactions, mission updates
SOMETIMES: Navigation events, discoveries, economic opportunities
NEVER: Maintenance events, redundant information, marked-to-ignore events
Reply "NULL": none of the events in the event list require a reply

## Response Priority Order
1. Immediate danger to ship or crew (e.g., fuel level critical, hull damage)
2. Potential future dangers (e.g., cargo flagged illegal, hostile ship detected)
3. Human player interactions (e.g., player ships/factions, player activity)
4. Legal status changes (e.g., cargo illegal, fines)
5. Cargo risks or opportunities (e.g., market opportunities, rare goods, stolen or illegal cargo)
6. Economic gain (e.g., mining opportunities, resources, trade profits, market evaluations)
7. Exploration value (e.g., valuable system bodies, new discoveries)
8. Navigation information (e.g., route, system layout)
9. Interesting facts (e.g., lore, minor details)

# Ship System Status Parameters

| System Parameter | WARNING Threshold   | CRITICAL Threshold           | Additional Considerations |
|------------------|---------------------|------------------------------|---------------------------|
| Fuel Level       | < 25% of capacity   | < 10% of capacity            | - Higher risk near non-scoopable stars - Critical when jump requires 80%+ of total capacity |
| Hull Health      | < 50%               | < 20%                        | - Risk increases under attack |
| Temperature      | > 80°C              | > 95°C                       | - Monitor carefully during fuel scooping |
| Shield Status    | < 20%               | 0% (offline)                 | - Priority recovery needed in combat zones |
| System Security  | "Low" or "Anarchy"  | "Anarchy"                    | - Higher risk when carrying valuable/mission cargo |
| Threat Level     | 1-2 (MINOR/CAUTION) | ≥ 4 (HIGH/MAJOR)             | - Level 5+ priority alert |
| Oxygen Level     | < 5 minutes         | < 2 minutes                  | - Emergency priority when compromised |
| Bounty Value     | ≥ 100,000 CR (GOOD) | ≥ 1,000,000 CR (EXCEPTIONAL) | - Exceptional status worth mention for bountyhunt |

Also monitor for:
• Multiple hostile NPC messages (indicates escalation)
• Compromised nav beacons (potential ambush points)
• Illegal/stolen cargo warnings when approaching stations

# Data interpretation
- System with no planets and no human presence = barren
- System with planes but no human presence = deserted
- Fuel % = FuelLevel / FuelCapacity * 100
- HullHealth 1.0 = 100%
- Round fractional numbers to intergers
- Round big numbers to the nearest million
- Use consistent units (fuel in tons, distance in ly)

## Market value
- Exceptional Profit – Profit > 10,000 CR
- High Profit – 5,000 < Profit ≤ 10,000 CR
- Moderate Profit – 1,000 < Profit ≤ 5,000 CR
- Low/No Profit – 0 < Profit ≤ 1,000 CR
- Loss – Profit ≤ 0 CR

# Current ship status, use as context:
{current_status}

# Ship cargo, use as context:
{current_cargo}

# Active missions, use as context:
{current_missions}

# 20 previous events, use as context:
{recent_events}

# Your previous 20 responses (condensed), use as context:
{recent_responses}

"""

TOOLS_PROMPT = """
# Tool Usage

## Function Call Format
- Output ONLY the function name and parameter on a single line and quote string parameters, e.g., get_system_stations("Sol")
- Request only ONE tool at a time

## Response Processing
- Extract relevant information only
- Integrate findings naturally in your response
- Notify that you've accessed additional information

## Tool Error Handling
- If a tool returns no data, infer that information is unavailable

## When to Use Tools
- Use tools when basic event information is insufficient
- Use when additional context would enhance your response
- Prioritize tools based on event relevance and information need

## Tool Selection Guide
"""

USER_PROMPT = """
# Remarkable information:
- Rings, belts and hotspots for mining
- A guardian site is detected
- A megaship is detected
- A generation ship is detected
- A system colonization ship is detected
- A player or a player faction
- A tech broker in the system or station
- An engineer is in the system or station
- Rare goods

# This is the event or a list of events that just happened, with a small context and instructions specific for each event type:
{event_new}
"""

# This is no longer needed, I've found the AI can handle the events by itself
# Remember this about stars:
# Type K (Orange star): scoopable for fuel.
# Type G (Yellow star): scoopabl for fuele.
# Type B (Blue-White start): scoopable for fuel.
# Type F (White star): scoopable for fuel.
# Type O (Blue star): scoopable for fuel.
# Type A (Blue-White star): scoopable for fuel.
# Type M (Red Dwarf): scoopable for fuel.
# You have a professional and formal tone, technical knowledge of the ship systems, you focus on safety, and has neutral political views.
# Type L (Brown dwarf): not scoopable for fuel.
# Type T (Brown dwarf): not scoopable for fuel.
# Type Y (Brown dwarf): not scoopable for fuel.

# Change to True or False, depending if you want the assistant to react or ignore each event


# Startup Events
STARTUP_EVENTS = {
    "LoadGame": False,
    "NewCommander": False,
    "Missions": False,
    "Statistics": False,
}

# Combat Events
COMBAT_EVENTS = {
    "Died": False,
    "Bounty": True,
    "CapShipBond": True,
    "Interdiction": True,
    "Interdicted": False,
    "EscapeInterdiction": False,
    "FactionKillBond": True,
    "FighterDestroyed": True,
    "HeatDamage": True,
    "HeatWarning": True,
    "HullDamage": True,
    "PVPKill": True,
    "ShieldState": True,
    "ShipTargeted": True,
    "SRVDestroyed": True,
    "UnderAttack": True,
}

# Travel Events
TRAVEL_EVENTS = {
    "CodexEntry": True,
    "ApproachBody": True,
    "Docked": False,
    "DockingCanceled": False,
    "DockingDenied": True,
    "DockingGranted": False,
    "DockingRequested": False,
    "DockingTimeout": False,
    "FSDJump": True,
    "FSDTarget": True,
    "LeaveBody": True,
    "Liftoff": True,
    "StartJump": False,
    "SupercruiseEntry": False,
    "SupercruiseExit": True,
    "Touchdown": True,
    "Undocked": True,
    "NavRoute": False,
    "NavRouteClear": False,
}

# Exploration Events
EXPLORATION_EVENTS = {
    "CodexEntry": True,
    "DiscoveryScan": True,
    "Scan": True,
    "FSSAllBodiesFound": True,
    "FSSBodySignals": False,
    "FSSDiscoveryScan": True,
    "FSSSignalDiscovered": True,
    "MaterialCollected": True,
    "MaterialDiscarded": False,
    "MaterialDiscovered": True,
    "MultiSellExplorationData": False,
    "NavBeaconScan": True,
    "BuyExplorationData": False,
    "SAAScanComplete": False,
    "SAASignalsFound": True,
    "ScanBaryCentre": False,
    "SellExplorationData": False,
    "Screenshot": False,
}

# Trade Events
TRADE_EVENTS = {
    "Trade": False,
    "AsteroidCracked": False,
    "BuyTradeData": False,
    "CollectCargo": True,
    "EjectCargo": True,
    "MarketBuy": False,
    "MarketSell": False,
    "MiningRefined": False,
}

# Station Services Events
STATION_SERVICES_EVENTS = {
    "StationServices": True,
    "BuyAmmo": False,
    "BuyDrones": False,
    "CargoDepot": True,
    "CommunityGoal": True,
    "CommunityGoalDiscard": False,
    "CommunityGoalJoin": False,
    "CommunityGoalReward": False,
    "CrewAssign": False,
    "CrewFire": False,
    "CrewHire": False,
    "EngineerContribution": False,
    "EngineerCraft": True,
    "EngineerLegacyConvert": False,
    "FetchRemoteModule": False,
    "Market": True,
    "MassModuleStore": False,
    "MaterialTrade": True,
    "MissionAbandoned": False,
    "MissionAccepted": False,
    "MissionCompleted": True,
    "MissionFailed": False,
    "MissionRedirected": False,
    "ModuleBuy": False,
    "ModuleRetrieve": False,
    "ModuleSell": False,
    "ModuleSellRemote": False,
    "ModuleStore": False,
    "ModuleSwap": False,
    "Outfitting": False,
    "PayBounties": True,
    "PayFines": True,
    "PayLegacyFines": True,
    "RedeemVoucher": True,
    "RefuelAll": False,
    "RefuelPartial": False,
    "Repair": False,
    "RepairAll": False,
    "RestockVehicle": False,
    "ScientificResearch": True,
    "ShipyardTransfer": True,
}

# Powerplay Events
POWERPLAY_EVENTS = {
    "PowerplayCollect": True,
    "PowerplayDefect": True,
    "PowerplayDeliver": False,
    "PowerplayFastTrack": False,
    "PowerplayJoin": False,
    "PowerplayLeave": False,
    "PowerplaySalary": False,
    "PowerplayVote": False,
    "PowerplayVoucher": False,
}

# Squadron Events
SQUADRON_EVENTS = {
    "AppliedToSquadron": False,
    "DisbandedSquadron": False,
    "InvitedToSquadron": True,
    "JoinedSquadron": False,
    "KickedFromSquadron": True,
    "LeftSquadron": True,
    "SharedBookmarkToSquadron": False,
    "SquadronCreated": False,
    "SquadronDemotion": True,
    "SquadronPromotion": True,
    "WonATrophyForSquadron": False,
}

# Fleet Carrier Events
FLEET_CARRIER_EVENTS = {
    "CarrierJump": True,
    "CarrierBuy": False,
    "CarrierStats": False,
    "CarrierJumpRequest": True,
    "CarrierDecommission": False,
    "CarrierCancelDecommission": False,
    "CarrierBankTransfer": False,
    "CarrierDepositFuel": True,
    "CarrierCrewServices": False,
    "CarrierFinance": False,
    "CarrierShipPack": False,
    "CarrierModulePack": False,
    "CarrierTradeOrder": False,
    "CarrierDockingPermission": False,
    "CarrierNameChanged": False,
    "CarrierJumpCancelled": False,
}

# Odyssey Events
ODYSSEY_EVENTS = {
    "Backpack": False,
    "BackpackChange": False,
    "BookDropship": False,
    "BookTaxi": False,
    "BuyMicroResources": False,
    "BuySuit": False,
    "BuyWeapon": False,
    "CancelDropship": False,
    "CancelTaxi": False,
    "CollectItems": False,
    "CreateSuitLoadout": False,
    "DeleteSuitLoadout": False,
    "Disembark": True,
    "DropItems": False,
    "DropShipDeploy": False,
    "Embark": True,
    "FCMaterials": False,
    "LoadoutEquipModule": False,
    "LoadoutRemoveModule": False,
    "RenameSuitLoadout": False,
    "ScanOrganic": False,
    "SellMicroResources": False,
    "SellOrganicData": False,
    "SellWeapon": False,
    "SwitchSuitLoadout": False,
    "TransferMicroResources": False,
    "TradeMicroResources": False,
    "UpgradeSuit": False,
    "UpgradeWeapon": False,
    "UseConsumable": False,
}

# Other Events
OTHER_EVENTS = {
    "AfmuRepairs": False,
    "ApproachSettlement": True,
    "ChangeCrewRole": False,
    "CockpitBreached": True,
    "CommitCrime": True,
    "Continued": False,
    "CrewLaunchFighter": True,
    "CrewMemberJoins": True,
    "CrewMemberQuits": True,
    "CrewMemberRoleChange": True,
    "CrimeVictim": True,
    "DatalinkScan": True,
    "DatalinkVoucher": False,
    "DataScanned": True,
    "DockFighter": True,
    "DockSRV": True,
    "EndCrewSession": True,
    "FighterRebuilt": True,
    "FuelScoop": True,
    "Friends": True,
    "JetConeBoost": False,
    "JetConeDamage": False,
    "JoinACrew": True,
    "KickCrewMember": True,
    "LaunchDrone": False,
    "LaunchFighter": True,
    "LaunchSRV": True,
    "ModuleInfo": False,
    "NpcCrewRank": False,
    "Promotion": True,
    "ProspectedAsteroid": True,
    "QuitACrew": False,
    "RebootRepair": True,
    "ReceiveText": True,
    "RepairDrone": False,
    "Resurrect": True,
    "Scanned": True,
    "SelfDestruct": True,
    "SendText": False,
    "Shutdown": False,
    "Synthesis": False,
    "SystemsShutdown": False,
    "USSDrop": False,
    "VehicleSwitch": False,
    "WingAdd": False,
    "WingInvite": True,
    "WingJoin": False,
    "WingLeave": False,
    "CargoTransfer": False,
    "SupercruiseDestinationDrop": False,
}

# Status Events
STATUS_EVENTS = {
    "LandingGearUp": False,
    "LandingGearDown": False,
    "FlightAssistOn": False,
    "FlightAssistOff": False,
    "HardpointsRetracted": False,
    "HardpointsDeployed": False,
    "LightsOff": False,
    "LightsOn": False,
    "CargoScoopRetracted": False,
    "CargoScoopDeployed": False,
    "SilentRunningOff": False,
    "SilentRunningOn": False,
    "FuelScoopStarted": False,
    "FuelScoopEnded": False,
    "SrvHandbrakeOff": False,
    "SrvHandbrakeOn": False,
    "SrvTurretViewConnected": False,
    "SrvTurretViewDisconnected": False,
    "SrvDriveAssistOff": False,
    "SrvDriveAssistOn": False,
    "FsdMassLockEscaped": False,
    "FsdMassLocked": False,
    "LowFuelWarningCleared": True,
    "LowFuelWarning": True,
    "OutofDanger": True,
    "InDanger": True,
    "NightVisionOff": False,
    "NightVisionOn": False,
    "LowOxygenWarningCleared": True,
    "LowOxygenWarning": True,
    "LowHealthWarningCleared": True,
    "LowHealthWarning": True,
    "GlideModeExited": False,
    "GlideModeEntered": False,
    "BreathableAtmosphereExited": False,
    "BreathableAtmosphereEntered": False,
    "LegalStateChanged": True,
    "WeaponSelected": False,
}

MEMORY_EVENTS = [
    # Startup Events
    "NewCommander",
    "Missions",
    "Statistics",
    # Combat Events
    "Bounty",
    "CapShipBond",
    "Interdiction",
    "Interdicted",
    "EscapeInterdiction",
    "FactionKillBond",
    "FighterDestroyed",
    "HeatDamage",
    "HeatWarning",
    "HullDamage",
    "PVPKill",
    "ShieldState",
    "ShipTargeted",
    "SRVDestroyed",
    "UnderAttack",
    # Travel Events
    "ApproachBody",
    "Docked",
    "DockingCanceled",
    "DockingDenied",
    "DockingGranted",
    "DockingRequested",
    "DockingTimeout",
    "FSDJump",
    "FSDTarget",
    "LeaveBody",
    "Liftoff",
    "StartJump",
    "SupercruiseEntry",
    "SupercruiseExit",
    "Touchdown",
    "Undocked",
    "NavRoute",
    "NavRouteClear",
    # Exploration Events
    "DiscoveryScan",
    "Scan",
    "FSSAllBodiesFound",
    "FSSBodySignals",
    "FSSDiscoveryScan",
    "FSSSignalDiscovered",
    "MaterialCollected",
    "MaterialDiscarded",
    "MaterialDiscovered",
    "MultiSellExplorationData",
    "NavBeaconScan",
    "BuyExplorationData",
    "SAAScanComplete",
    "SAASignalsFound",
    "ScanBaryCentre",
    "SellExplorationData",
    # Trade Events
    "Trade",
    "AsteroidCracked",
    "BuyTradeData",
    "CollectCargo",
    "EjectCargo",
    "MarketBuy",
    "MarketSell",
    "MiningRefined",
    # Station Services Events
    "StationServices",
    "BuyAmmo",
    "BuyDrones",
    "CargoDepot",
    "CommunityGoal",
    "CommunityGoalDiscard",
    "CommunityGoalJoin",
    "CommunityGoalReward",
    "CrewAssign",
    "CrewFire",
    "CrewHire",
    "EngineerContribution",
    "EngineerCraft",
    "EngineerLegacyConvert",
    "FetchRemoteModule",
    "Market",
    "MassModuleStore",
    "MaterialTrade",
    "MissionAbandoned",
    "MissionAccepted",
    "MissionCompleted",
    "MissionFailed",
    "MissionRedirected",
    "ModuleBuy",
    "ModuleRetrieve",
    "ModuleSell",
    "ModuleSellRemote",
    "ModuleStore",
    "ModuleSwap",
    "Outfitting",
    "PayBounties",
    "PayFines",
    "PayLegacyFines",
    "RedeemVoucher",
    "RefuelAll",
    "RefuelPartial",
    "Repair",
    "RepairAll",
    "RestockVehicle",
    "ScientificResearch",
    "ShipyardTransfer",
    # Powerplay Events
    "PowerplayCollect",
    "PowerplayDefect",
    "PowerplayDeliver",
    "PowerplayFastTrack",
    "PowerplayJoin",
    "PowerplayLeave",
    "PowerplaySalary",
    "PowerplayVote",
    "PowerplayVoucher",
    # Squadron Events
    "AppliedToSquadron",
    "DisbandedSquadron",
    "InvitedToSquadron",
    "JoinedSquadron",
    "KickedFromSquadron",
    "LeftSquadron",
    "SharedBookmarkToSquadron",
    "SquadronCreated",
    "SquadronDemotion",
    "SquadronPromotion",
    "WonATrophyForSquadron",
    # Fleet Carrier Events
    "CarrierJump",
    "CarrierBuy",
    "CarrierStats",
    "CarrierJumpRequest",
    "CarrierDecommission",
    "CarrierCancelDecommission",
    "CarrierBankTransfer",
    "CarrierDepositFuel",
    "CarrierCrewServices",
    "CarrierFinance",
    "CarrierShipPack",
    "CarrierModulePack",
    "CarrierTradeOrder",
    "CarrierDockingPermission",
    "CarrierNameChanged",
    "CarrierJumpCancelled",
    # Odyssey Events
    "Backpack",
    "BackpackChange",
    "BookDropship",
    "BookTaxi",
    "BuyMicroResources",
    "BuySuit",
    "BuyWeapon",
    "CancelDropship",
    "CancelTaxi",
    "CollectItems",
    "CreateSuitLoadout",
    "DeleteSuitLoadout",
    "Disembark",
    "DropItems",
    "DropShipDeploy",
    "Embark",
    "FCMaterials",
    "LoadoutEquipModule",
    "LoadoutRemoveModule",
    "RenameSuitLoadout",
    "ScanOrganic",
    "SellMicroResources",
    "SellOrganicData",
    "SellWeapon",
    "SwitchSuitLoadout",
    "TransferMicroResources",
    "TradeMicroResources",
    "UpgradeSuit",
    "UpgradeWeapon",
    "UseConsumable",
    # Other Events
    "AfmuRepairs",
    "ApproachSettlement",
    "ChangeCrewRole",
    "CockpitBreached",
    "CommitCrime",
    "Continued",
    "CrewLaunchFighter",
    "CrewMemberJoins",
    "CrewMemberQuits",
    "CrewMemberRoleChange",
    "CrimeVictim",
    "DatalinkScan",
    "DatalinkVoucher",
    "DataScanned",
    "DockFighter",
    "DockSRV",
    "EndCrewSession",
    "FighterRebuilt",
    "FuelScoop",
    "Friends",
    "JetConeBoost",
    "JetConeDamage",
    "JoinACrew",
    "KickCrewMember",
    "LaunchDrone",
    "LaunchFighter",
    "LaunchSRV",
    "ModuleInfo",
    "NpcCrewRank",
    "Promotion",
    "ProspectedAsteroid",
    "QuitACrew",
    "RebootRepair",
    "ReceiveText",
    "RepairDrone",
    "Resurrect",
    "Scanned",
    "SelfDestruct",
    "SendText",
    "Shutdown",
    "Synthesis",
    "SystemsShutdown",
    "USSDrop",
    "VehicleSwitch",
    "WingAdd",
    "WingInvite",
    "WingJoin",
    "WingLeave",
    "CargoTransfer",
    "SupercruiseDestinationDrop",
    # Status Events
    "LandingGearUp",
    "LandingGearDown",
    "FlightAssistOn",
    "FlightAssistOff",
    "HardpointsRetracted",
    "HardpointsDeployed",
    "LightsOff",
    "LightsOn",
    "CargoScoopRetracted",
    "CargoScoopDeployed",
    "SilentRunningOff",
    "SilentRunningOn",
    "FuelScoopStarted",
    "FuelScoopEnded",
    "SrvHandbrakeOff",
    "SrvHandbrakeOn",
    "SrvTurretViewConnected",
    "SrvTurretViewDisconnected",
    "SrvDriveAssistOff",
    "SrvDriveAssistOn",
    "FsdMassLockEscaped",
    "FsdMassLocked",
    "LowFuelWarningCleared",
    "LowFuelWarning",
    "OutofDanger",
    "InDanger",
    "NightVisionOff",
    "NightVisionOn",
    "LowOxygenWarningCleared",
    "LowOxygenWarning",
    "LowHealthWarningCleared",
    "LowHealthWarning",
    "GlideModeExited",
    "GlideModeEntered",
    "BreathableAtmosphereExited",
    "BreathableAtmosphereEntered",
    "LegalStateChanged",
    "WeaponSelected",
]


# Debug flags. You can use these to improve the information displayed in the console
DEBUG_EVENT_DUMP = False
DEBUG_PARSER_PROMPT = True
DEBUG_STATE_UPDATE = False
DEBUG_AI_PROMPT_DUMP = True
